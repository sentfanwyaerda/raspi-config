#!/bin/sh
# Part of raspi-config http://github.com/asb/raspi-config
#
# See LICENSE file for copyright and license details

INTERACTIVE=True
ASK_TO_REBOOT=0

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-8))
}

do_about() {
  whiptail --msgbox "\
This tool provides a straight-forward way of doing initial
configuration of the Raspberry Pi. Although it can be run
at any time, some of the options may have difficulties if
you have heavily customised your installation.\
" 20 70 1
}

do_expand_rootfs() {
  if ! [ -h /dev/root ]; then
whiptail --msgbox "/dev/root does not exist or is not a symlink. Don't know how to expand" 20 60 2
    return 0
  fi

ROOT_PART=$(readlink /dev/root)
  PART_NUM=${ROOT_PART#mmcblk0p}
  if [ "$PART_NUM" = "$ROOT_PART" ]; then
whiptail --msgbox "/dev/root is not an SD card. Don't know how to expand" 20 60 2
    return 0
  fi

  # NOTE: the NOOBS partition layout confuses parted. For now, let's only
  # agree to work with a sufficiently simple partition layout
  if [ "$PART_NUM" -ne 2 ]; then
whiptail --msgbox "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway." 20 60 2
    return 0
  fi

LAST_PART_NUM=$(parted /dev/mmcblk0 -ms unit s p | tail -n 1 | cut -f 1 -d:)

  if [ "$LAST_PART_NUM" != "$PART_NUM" ]; then
whiptail --msgbox "/dev/root is not the last partition. Don't know how to expand" 20 60 2
    return 0
  fi

  # Get the starting offset of the root partition
  PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^${PART_NUM}" | cut -f 2 -d:)
  [ "$PART_START" ] || return 1
  # Return value will likely be error for fdisk as it fails to reload the
  # partition table because the root fs is mounted
  fdisk /dev/mmcblk0 <<EOF
p
d
$PART_NUM
n
p
$PART_NUM
$PART_START

p
w
EOF
  ASK_TO_REBOOT=1

  # now set up an init.d script
cat <<\EOF > /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides: resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
start)
log_daemon_msg "Starting resize2fs_once" &&
resize2fs /dev/root &&
rm /etc/init.d/resize2fs_once &&
update-rc.d resize2fs_once remove &&
log_end_msg $?
;;
*)
echo "Usage: $0 start" >&2
exit 3
;;
esac
EOF
  chmod +x /etc/init.d/resize2fs_once &&
  update-rc.d resize2fs_once defaults &&
  if [ "$INTERACTIVE" = True ]; then
whiptail --msgbox "Root partition has been resized.\nThe filesystem will be enlarged upon the next reboot" 20 60 2
  fi
}

set_config_var() {
  lua - "$1" "$2" "$3" <<EOF > "$3.bak"
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
  if line:match("^#?%s*"..key.."=.*$") then
    line=key.."="..value
    made_change=true
  end
  print(line)
end

if not made_change then
  print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}

get_config_var() {
  lua - "$1" "$2" <<EOF
local key=assert(arg[1])
local fn=assert(arg[2])
local file=assert(io.open(fn))
for line in file:lines() do
  local val = line:match("^#?%s*"..key.."=(.*)$")
  if (val ~= nil) then
    print(val)
    break
  end
end
EOF
}

# $1 is 0 to disable overscan, 1 to disable it
set_overscan() {
  # Stop if /boot is not a mountpoint
  if ! mountpoint -q /boot; then
    return 1
  fi

  [ -e /boot/config.txt ] || touch /boot/config.txt

  if [ "$1" -eq 0 ]; then # disable overscan
    sed /boot/config.txt -i -e "s/^overscan_/#overscan_/"
    set_config_var disable_overscan 1 /boot/config.txt
  else # enable overscan
    set_config_var disable_overscan 0 /boot/config.txt
  fi
}

do_overscan() {
  whiptail --yesno "What would you like to do with overscan" 20 60 2 \
    --yes-button Disable --no-button Enable
  RET=$?
  if [ $RET -eq 0 ] || [ $RET -eq 1 ]; then
    ASK_TO_REBOOT=1
    set_overscan $RET;
  else
    return 1
  fi
}

do_change_pass() {
  whiptail --msgbox "You will now be asked to enter a new password for the pi user" 20 60 1
  passwd pi &&
  whiptail --msgbox "Password changed successfully" 20 60 1
}

do_configure_keyboard() {
  dpkg-reconfigure keyboard-configuration &&
  printf "Reloading keymap. This may take a short while\n" &&
  invoke-rc.d keyboard-setup start
}

do_change_locale() {
  dpkg-reconfigure locales
}

do_change_timezone() {
  dpkg-reconfigure tzdata
}

do_change_hostname() {
  whiptail --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1

  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

do_memory_split() { # Memory Split
  if [ -e /boot/start_cd.elf ]; then
    # New-style memory split setting
    if ! mountpoint -q /boot; then
      return 1
    fi
    ## get current memory split from /boot/config.txt
    CUR_GPU_MEM=$(get_config_var gpu_mem /boot/config.txt)
    [ -z "$CUR_GPU_MEM" ] && CUR_GPU_MEM=64
    ## ask users what gpu_mem they want
    NEW_GPU_MEM=$(whiptail --inputbox "How much memory should the GPU have?  e.g. 16/32/64/128/256" \
      20 70 -- "$CUR_GPU_MEM" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
      set_config_var gpu_mem "$NEW_GPU_MEM" /boot/config.txt
      ASK_TO_REBOOT=1
    fi
  else # Old firmware so do start.elf renaming
    get_current_memory_split
    MEMSPLIT=$(whiptail --menu "Set memory split.\n$MEMSPLIT_DESCRIPTION" 20 60 10 \
      "240" "240MiB for ARM, 16MiB for VideoCore" \
      "224" "224MiB for ARM, 32MiB for VideoCore" \
      "192" "192MiB for ARM, 64MiB for VideoCore" \
      "128" "128MiB for ARM, 128MiB for VideoCore" \
      3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
      set_memory_split ${MEMSPLIT}
      ASK_TO_REBOOT=1
    fi
  fi
}

get_current_memory_split() {
  # Stop if /boot is not a mountpoint
  if ! mountpoint -q /boot; then
    return 1
  fi
  AVAILABLE_SPLITS="128 192 224 240"
  MEMSPLIT_DESCRIPTION=""
  for SPLIT in $AVAILABLE_SPLITS;do
    if [ -e /boot/arm${SPLIT}_start.elf ] && cmp /boot/arm${SPLIT}_start.elf /boot/start.elf >/dev/null 2>&1;then
      CURRENT_MEMSPLIT=$SPLIT
      MEMSPLIT_DESCRIPTION="Current: ${CURRENT_MEMSPLIT}MiB for ARM, $((256 - $CURRENT_MEMSPLIT))MiB for VideoCore"
      break
    fi
  done
}

set_memory_split() {
  cp -a /boot/arm${1}_start.elf /boot/start.elf
  sync
}

do_overclock() {
  whiptail --msgbox "\
Be aware that overclocking may reduce the lifetime of your
Raspberry Pi. If overclocking at a certain level causes
system instability, try a more modest overclock. Hold down
shift during boot to temporarily disable overclock.
See http://elinux.org/RPi_Overclocking for more information.\
" 20 70 1
  OVERCLOCK=$(whiptail --menu "Chose overclock preset" 20 60 10 \
    "None" "700MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt" \
    "Modest" "800MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt" \
    "Medium" "900MHz ARM, 250MHz core, 450MHz SDRAM, 2 overvolt" \
    "High" "950MHz ARM, 250MHz core, 450MHz SDRAM, 6 overvolt" \
    "Turbo" "1000MHz ARM, 500MHz core, 600MHz SDRAM, 6 overvolt" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$OVERCLOCK" in
      None)
        set_overclock None 700 250 400 0
        ;;
      Modest)
        set_overclock Modest 800 250 400 0
        ;;
      Medium)
        set_overclock Medium 900 250 450 2
        ;;
      High)
        set_overclock High 950 250 450 6
        ;;
      Turbo)
        whiptail --msgbox "Warning: some people have reported SD card corruption with this level of overclock." \
          20 70 1
        [ $? -ne 0 ] && return 1
        set_overclock Turbo 1000 500 600 6
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised overclock preset" 20 60 2
        return 1
        ;;
    esac
    ASK_TO_REBOOT=1
  fi
}

set_overclock() {
  set_config_var arm_freq $2 /boot/config.txt &&
  set_config_var core_freq $3 /boot/config.txt &&
  set_config_var sdram_freq $4 /boot/config.txt &&
  set_config_var over_voltage $5 /boot/config.txt &&
  # now set up an init.d script
cat <<\EOF > /etc/init.d/switch_cpu_governor &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          switch_cpu_governor
# Required-Start: udev mountkernfs $remote_fs
# Required-Stop:
# Default-Start: S
# Default-Stop:
# Short-Description: Switch to ondemand cpu governor (unless shift key is pressed)
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Checking if shift key is held down"
    timeout 1 thd --dump /dev/input/event* | grep -q "LEFTSHIFT\|RIGHTSHIFT"
    if [ $? -eq 0 ]; then
      printf " Yes. Not switching scaling governor"
      log_end_msg 0
    else
      SYS_CPUFREQ_GOVERNOR=/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
      [ -e $SYS_CPUFREQ_GOVERNOR ] && echo "ondemand" > $SYS_CPUFREQ_GOVERNOR
      echo 70 > /sys/devices/system/cpu/cpufreq/ondemand/up_threshold
      printf " No. Switching to ondemand scaling governor"
      log_end_msg 0
    fi
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
  chmod +x /etc/init.d/switch_cpu_governor &&
  update-rc.d switch_cpu_governor defaults &&
  whiptail --msgbox "Set overclock to preset '$1'" 20 60 2
}

do_ssh() {
  if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
    whiptail --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
    return 1
  fi
  whiptail --yesno "Would you like the SSH server enabled or disabled?" 20 60 2 \
    --yes-button Enable --no-button Disable
  RET=$?
  if [ $RET -eq 0 ]; then
    update-rc.d ssh enable &&
    invoke-rc.d ssh start &&
    whiptail --msgbox "SSH server enabled" 20 60 1
  elif [ $RET -eq 1 ]; then
    update-rc.d ssh disable &&
    whiptail --msgbox "SSH server disabled" 20 60 1
  else
    return $RET
  fi
}

disable_raspi_config_at_boot() {
  if [ -e /etc/profile.d/raspi-config.sh ]; then
    rm -f /etc/profile.d/raspi-config.sh
    sed -i /etc/inittab \
      -e "s/^#\(.*\)#\s*RPICFG_TO_ENABLE\s*/\1/" \
      -e "/#\s*RPICFG_TO_DISABLE/d"
    telinit q
  fi
}

enable_boot_to_scratch() {
  if [ -e /etc/profile.d/boottoscratch.sh ]; then
    printf "/etc/profile.d/boottoscratch.sh exists, so assuming boot to scratch enabled\n"
    return 0;
  fi
  sed -i /etc/inittab -e "s|^\(1:2345.*getty.*tty1.*\)|\
#\1 # BTS_TO_ENABLE\n1:2345:respawn:/bin/login -f pi tty1 </dev/tty1 >/dev/tty1 2>\&1 # BTS_TO_DISABLE|"
  cat <<\EOF > /etc/profile.d/boottoscratch.sh
#!/bin/sh
# Part of raspi-config http://github.com/asb/raspi-config
#
# See LICENSE file for copyright and license details

# Should be installed to /etc/profile.d/boottoscratch.sh to force scratch to run upon boot

# You may also want to set automatic login in /etc/inittab on tty1 by adding a 
# line such as the following (raspi-config does this for you):
# 1:2345:respawn:/bin/login -f pi tty1 </dev/tty1 >/dev/tty1 2>&1 # BTS_TO_DISABLE

if [ $(tty) = "/dev/tty1" ]; then
  printf "openbox --config-file /home/pi/boottoscratch/openbox_rc.xml & scratch" | xinit /dev/stdin
  printf "\n\n\nShutting down in 5 seconds, hit ctrl-C to cancel\n" && sleep 5 && sudo shutdown -h now
fi
EOF

  mkdir -p /home/pi/boottoscratch
  cat <<\EOF > /home/pi/boottoscratch/openbox_rc.xml
<?xml version="1.0" encoding="UTF-8"?>
<openbox_config xmlns="http://openbox.org/3.4/rc"
    xmlns:xi="http://www.w3.org/2001/XInclude">
<applications>
  <application name="squeak" type="normal">
    <focus>yes</focus>
    <fullscreen>yes</fullscreen>
  </application>
</applications>
</openbox_config>
EOF
  telinit q
}

disable_boot_to_scratch() {
  if [ -e /etc/profile.d/boottoscratch.sh ]; then
    rm -f /etc/profile.d/boottoscratch.sh
    sed -i /etc/inittab \
      -e "s/^#\(.*\)#\s*BTS_TO_ENABLE\s*/\1/" \
      -e "/#\s*BTS_TO_DISABLE/d"
    telinit q
  fi
} 

do_boot_behaviour() {
  BOOTOPT=$(whiptail --menu "Chose boot option" 20 60 10 \
    "Console" "Text console, requiring login (default)" \
    "Desktop" "Log in as user 'pi' at the graphical desktop" \
    "Scratch" "Start the Scratch programming environment upon boot" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$BOOTOPT" in
      Console)
        [ -e /etc/init.d/lightdm ] && update-rc.d lightdm disable 2
        disable_boot_to_scratch
        ;;
      Desktop)
        if [ -e /etc/init.d/lightdm ]; then
          update-rc.d lightdm enable 2
          sed /etc/lightdm/lightdm.conf -i -e "s/^#autologin-user=.*/autologin-user=pi/"
          disable_boot_to_scratch
          disable_raspi_config_at_boot
        else
          whiptail --msgbox "Do sudo apt-get install lightdm to allow configuration of boot to desktop" 20 60 2
          return 1
        fi
        ;;
      Scratch)
        if [ -e /usr/bin/scratch ]; then
          [ -e /etc/init.d/lightdm ] && update-rc.d lightdm disable 2
          disable_raspi_config_at_boot
          enable_boot_to_scratch
        else
          whiptail --msgbox "Do sudo apt-get install scratch to allow configuration of boot to scratch" 20 60 2
        fi
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised boot option" 20 60 2
        return 1
        ;;
    esac
    ASK_TO_REBOOT=1 
  fi
}

do_rastrack() {
  whiptail --msgbox "\
Rastrack (http://rastrack.co.uk) is a website run by Ryan Walmsley
for tracking where people are using Raspberry Pis around the world.
If you have an internet connection, you can add yourself directly
using this tool. This is just a bit of fun, not any sort of official
registration.\
" 20 70 1
  if [ $? -ne 0 ]; then
    return 0;
  fi
  UNAME=$(whiptail --inputbox "Username / Nickname For Rastrack Addition" 20 70 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    return 1;
  fi
  EMAIL=$(whiptail --inputbox "Email Address For Rastrack Addition" 20 70 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    return 1;
  fi
  curl --data "name=$UNAME&email=$EMAIL" http://rastrack.co.uk/api.php
  printf "Hit enter to continue\n"
  read TMP
}

# $1 is 0 to disable camera, 1 to enable it
set_camera() {
  # Stop if /boot is not a mountpoint
  if ! mountpoint -q /boot; then
    return 1
  fi

  [ -e /boot/config.txt ] || touch /boot/config.txt

  if [ "$1" -eq 0 ]; then # disable camera
    set_config_var start_x 0 /boot/config.txt
    sed /boot/config.txt -i -e "s/^startx/#startx/"
    sed /boot/config.txt -i -e "s/^start_file/#start_file/"
    sed /boot/config.txt -i -e "s/^fixup_file/#fixup_file/"
  else # enable camera
    set_config_var start_x 1 /boot/config.txt
    set_config_var gpu_mem 128 /boot/config.txt
    sed /boot/config.txt -i -e "s/^startx/#startx/"
    sed /boot/config.txt -i -e "s/^fixup_file/#fixup_file/"
  fi
}

do_camera() {
  if [ ! -e /boot/start_x.elf ]; then
    whiptail --msgbox "Your firmware appears to be out of date (no start_x.elf). Please update" 20 60 2
    return 1
  fi
  whiptail --yesno "Enable support for Raspberry Pi camera?" 20 60 2 \
    --yes-button Disable --no-button Enable
  RET=$?
  if [ $RET -eq 0 ] || [ $RET -eq 1 ]; then
    ASK_TO_REBOOT=1
    set_camera $RET;
  else
    return 1
  fi
}

do_asb_update() {
  apt-get update &&
  apt-get install raspi-config &&
  printf "Sleeping 5 seconds before reloading raspi-config\n" &&
  sleep 5 &&
  exec raspi-config
}

do_finish() {
  disable_raspi_config_at_boot
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

# $1 = filename, $2 = key name
get_json_string_val() {
  sed -n -e "s/^[[:space:]]*\"$2\"[[:space:]]*:[[:space:]]*\"\(.*\)\"[[:space:]]*,$/\1/p" $1
}

do_apply_os_config() {
  [ -e /boot/os_config.json ] || return 0
  NOOBSFLAVOUR=$(get_json_string_val /boot/os_config.json flavour)
  NOOBSLANGUAGE=$(get_json_string_val /boot/os_config.json language)
  NOOBSKEYBOARD=$(get_json_string_val /boot/os_config.json keyboard)

  if [ -n "$NOOBSFLAVOUR" ]; then
    printf "Setting flavour to %s based on os_config.json from NOOBS. May take a while\n" "$NOOBSFLAVOUR"

    if printf "%s" "$NOOBSFLAVOUR" | grep -q "Scratch"; then
      disable_raspi_config_at_boot
      enable_boot_to_scratch
    else
      printf "Unrecognised flavour. Ignoring\n"
    fi
  fi

  # TODO: currently ignores en_gb settings as we assume we are running in a 
  # first boot context, where UK English settings are default
  case "$NOOBSLANGUAGE" in
    "en")
      if [ "$NOOBSKEYBOARD" = "gb" ]; then
        DEBLANGUAGE="" # UK english is the default, so ignore
      else
        DEBLANGUAGE="en_US.UTF-8"
      fi
      ;;
    "de")
      DEBLANGUAGE="de_DE.UTF-8"
      ;;
    "fi")
      DEBLANGUAGE="fi_FI.UTF-8"
      ;;
    "fr")
      DEBLANGUAGE="fr_FR.UTF-8"
      ;;
    "hu")
      DEBLANGUAGE="hu_HU.UTF-8"
      ;;
    "ja")
      DEBLANGUAGE="ja_JP.UTF-8"
      ;;
    "nl")
      DEBLANGUAGE="nl_NL.UTF-8"
      ;;
    "pt")
      DEBLANGUAGE="pt_PT.UTF-8"
      ;;
    *)
      printf "Language '%s' not handled currently. Run sudo raspi-config to set up" "$NOOBSLANGUAGE"
      ;;
  esac

  if [ -n "$DEBLANGUAGE" ]; then
    printf "Setting language to %s based on os_config.json from NOOBS. May take a while\n" "$DEBLANGUAGE"
    # TODO: map noobs language to Debian spec
    cat << EOF | debconf-set-selections
locales   locales/locales_to_be_generated multiselect     fr_FR.UTF-8 UTF-8
EOF
    rm /etc/locale.gen
    dpkg-reconfigure -f noninteractive locales
    update-locale LANG=fr_FR.UTF-8
    cat << EOF | debconf-set-selections
locales   locales/default_environment_locale select       fr_FR.UTF-8
EOF
  fi

  if [ -n "$NOOBSKEYBOARD" -a "$NOOBSKEYBOARD" != "gb" ]; then
    printf "Setting keyboard layout to %s based on os_config.json from NOOBS. May take a while\n" "$NOOBSKEYBOARD"
    sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"$NOOBSKEYBOARD\"/"
    dpkg-reconfigure -f noninteractive keyboard-configuration
    invoke-rc.d keyboard-setup start
  fi
  return 0
}
 

#
# Command line options for non-interactive use
#
for i in $*
do
  case $i in
  --memory-split)
    OPT_MEMORY_SPLIT=GET
    printf "Not currently supported\n"
    exit 1
    ;;
  --memory-split=*)
    OPT_MEMORY_SPLIT=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
    printf "Not currently supported\n"
    exit 1
    ;;
  --expand-rootfs)
    INTERACTIVE=False
    do_expand_rootfs
    printf "Please reboot\n"
    exit 0
    ;;
  --apply-os-config)
    INTERACTIVE=False
    do_apply_os_config
    exit $?
    ;; 
  *)
    # unknown option
    ;;
  esac
done

#if [ "GET" = "${OPT_MEMORY_SPLIT:-}" ]; then
#  set -u # Fail on unset variables
#  get_current_memory_split
#  echo $CURRENT_MEMSPLIT
#  exit 0
#fi

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo raspi-config'\n"
  exit 1
fi

if [ -n "${OPT_MEMORY_SPLIT:-}" ]; then
  set -e # Fail when a command errors
  set_memory_split "${OPT_MEMORY_SPLIT}"
  exit 0
fi

do_internationalisation_menu() {
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Internationalisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "I1 Change Locale" "Set up language and regional settings to match your location" \
    "I2 Change Timezone" "Set up timezone to match your location" \
    "I3 Change Keyboard Layout" "Set the keyboard layout to match your keyboard" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      I1\ *) do_change_locale ;;
      I2\ *) do_change_timezone ;;
      I3\ *) do_configure_keyboard ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_advanced_menu() {
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "A1 Overscan" "You may need to configure overscan if black bars are present on display" \
    "A2 Hostname" "Set the visible name for this Pi on a network" \
    "A3 Memory Split" "Change the amount of memory made available to the GPU" \
    "A4 SSH" "Enable/Disable remote command line access to your Pi using SSH" \
    "A5 Update" "Update this tool to the latest version" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      A1\ *) do_overscan ;;
      A2\ *) do_change_hostname ;;
      A3\ *) do_memory_split ;;
      A4\ *) do_ssh ;;
      A5\ *) do_update ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

# [Upgrade http://github.com/sentfanwyaerda/raspi-config/ ]

do_fsroot_resize_menu() {
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Expand Filesystem" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "R0 Expand Filesystem (default)" "Ensures that all of the SD card (mmcblk0p1) storage is available to the OS" \
    "R1 Expand Filesystem (NOOBS)" "Ensures that all of the SD card storage is available to the OS" \
    "R2 Expand to Secure Split Filesystem" "Splits SD card into / (mmcblk0p1, READ ONLY) and /home (mmcblk0p5)" \
    "R3 Expand Home Filesystem" "Expands /home (mmcblk0p5) to all of the SD card" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
	  R0\ *) do_expand_rootfs ;;
	  R1\ *) do_expand_NOOBS ;;
	  R2\ *) do_expand_secure_split ;;
	  R3\ *) do_expand_mmcblk0p5 ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_expand_NOOBS() {
    whiptail --msgbox "Expanding NOOBS is not implemented yet." 20 60 2
}

do_expand_mmcblk0p5() {
  fdisk /dev/mmcblk0 <<EOF
p
d
5
d
3
p
n
e
3


n
l


p
w
EOF
	ASK_TO_REBOOT=1
	apply_resize2fs_once
	echo "resize2fs /dev/mmcblk0p5" >> /etc/init.d/resize2fs_once
}

do_expand_secure_split() {
  if ! [ -h /dev/root ]; then
    whiptail --msgbox "/dev/root does not exist or is not a symlink. Don't know how to expand" 20 60 2
    return 0
  fi

ROOT_PART=$(readlink /dev/root)
  PART_NUM=${ROOT_PART#mmcblk0p}
  if [ "$PART_NUM" = "$ROOT_PART" ]; then
    whiptail --msgbox "/dev/root is not an SD card. Don't know how to expand" 20 60 2
    return 0
  fi

  # NOTE: the NOOBS partition layout confuses parted. For now, let's only
  # agree to work with a sufficiently simple partition layout
  if [ "$PART_NUM" -ne 2 ]; then
    whiptail --msgbox "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway." 20 60 2
    return 0
  fi

  LAST_PART_NUM=$(parted /dev/mmcblk0 -ms unit s p | tail -n 1 | cut -f 1 -d:)

  if [ "$LAST_PART_NUM" != "$PART_NUM" ]; then
    whiptail --msgbox "/dev/root is not the last partition. Don't know how to expand" 20 60 2
    return 0
  fi

  # Get the starting offset of the root partition
  PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^${PART_NUM}" | cut -f 2 -d:)
  [ "$PART_START" ] || return 1
  # Return value will likely be error for fdisk as it fails to reload the
  # partition table because the root fs is mounted
  fdisk /dev/mmcblk0 <<EOF
p
d
2
n
p
2
$PART_START
12582912
p
n
e
3


n
l


p
w
EOF
		# add /home (/dev/mmcblk0p5) to /etc/fstab and format
		echo "/dev/mmcblk0p5 /home ext4 defaults,errors=remount-ro 0 1" >> /etc/fstab
		# the RPi wishes to reboot before:
		apply_resize2fs_once
		echo "mkfs --type=ext4 /dev/mmcblk0p5" >> /etc/init.d/resize2fs_once
		ASK_TO_REBOOT=1
		#update fstab
		wget https://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/fstab.whitebox -O /etc/fstab
}
apply_resize2fs_once() {
  if[ ! -f /etc/init.d/resize2fs_once ]; then
    # now set up an init.d script
    cat <<\EOF > /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/root &&
    rm /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once remove &&
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF

    chmod +x /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once defaults
  
  fi
}

do_server_menu() {
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Webserver Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "S1 Setup Git" "Installing and configuring Git" \
    "S2 Add virtual fixed IP address" "Binds eth0:0 with a static IP address while eth0 gets dhcp." \
    "S3 Install Webserver software" "Apache, MySQL, PHP, ..." \
	"S4 Install Samba server" "" \
	"S8 Setup cronjob to backup" "backup /var/www/ every 6 hours" \
	"S9 Install raspi-config++ Toolset" "backup-www, get-backup-www, zerofill and several rootfs tools" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_additional_menu
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      S1\ *) do_setup_git ;;
      S2\ *) do_fixedvitualip ;;
      S3\ *) do_webinstall ;;
	  S4\ *) do_samba_install ;;
	  S8\ *) do_backup_set_cronjob ;;
	  S9\ *) patch_rc_local ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

git_install(){
    apt-get install git-core;
}

do_setup_git(){
    git_install

    NAME=$(whiptail --inputbox "Which name do you want to use when committing changes in Git?" \
      20 70 -- "$NAME" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
      git config --global user.name $NAME
    fi
      EMAIL=$(whiptail --inputbox "By which email address can people reach you?" \
      20 70 -- "$EMAIL" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
      git config --global user.email $EMAIL
    fi
      LENGTH=$(whiptail --inputbox "How many seconds do you want your credentials to be cached? e.g. 0/900/3600/86400" \
      20 70 -- "900" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
      git config --global credential.helper "cache --timeout=$LENGTH"
    fi
    echo "Global Git Configuration:\n" -e &&
    git config --global -l
}

do_fixedvirtualip() {
  # /etc/rc.local "ifconfig eth0:0 192.168.2.100 \n route add -host 192.168.2.100 dev eth0:0"
  patch_rc_local
}

do_webinstall() {
  apt-get install apache2 libapache2-mod-php5 mysql php-gd geoip
  # #/etc/rc.local "service apache2 restart \n service mysql restart"
  patch_rc_local ;
  echo "Include /var/www/domains/httpd.conf/*.conf " >> /etc/apache2/apache2.conf
}
do_samba_install() {
  # apt-get install smb samba #(installed by default)
  # create share: /var/www
  # @/etc/samba/smb.conf ""
  # @/etc/rc.local "service samba restart"
  
  chmod 0777 /var/www -R && chown www-data /var/www -R && chgrp www-data /var/www -R
  
  echo "[www]\n\tcomment = Webroot\n\tpath = /var/www\n\tcreate mask = 0777\n\tdirectory mask = 0777\n\tforce create mode = 0777\n\tforce directory mode = 0777\n\twriteable = yes\n\tguest ok = yes\n\tread only = no\n\tbrowseable = yes\n\tlocking = no\n\tforce user = www-data\n\tforce group = www-data\n\twrite list = pi, @www-data\n\tinherit permissions = yes\n\n" >> /etc/samba/smb.conf
  
  echo "[backups]\n\tcomment = backups\n\tpath = /var/backups\n\tcreate mask = 0644\n\tdirectory mask = 0644\n\tforce create mode = 0644\n\tforce directory mode = 0644\n\twriteable = no\n\tguest ok = yes\n\tread only = yes\n\tbrowseable = yes\n\tlocking = no\n\tforce user = www-data\n\tforce group = www-data\n\twrite list = pi, @www-data\n\tinherit permissions = yes\n\n" >> /etc/samba/smb.conf
  
  patch_rc_local ;
}
do_ftp_install() {
  sleep 1
}

do_backup_set_cronjob() {
	# -: `uname -n`-`uname -m`-
	## crontab -e << @midnight tar -cf /var/backups/www\[`date +%Y-%m-%d`\].tgz -z /var/www
	#cronjob: +&& *ftp-upload* /var/backups/www\[`date +%Y-%m-%d`\].tgz ftp://somewhere/backups/
	
	patch_rc_local ;
	
	$cron="/tmp/crontab.`whoami`"
	crontab -l > $cron
	echo "59 5,11,17,23 * * * /var/backups/backup-www \n" >> $cron
	crontab $cron
	rm $cron
	sleep 1
}

patch_rc_local(){
  whiptail --yesno "Update /etc/rc.local?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /etc/rc.local http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/rc.local && chmod +x /etc/rc.local && sh /etc/rc.local
  fi
  whiptail --yesno "Update /var/backups/backup-www?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /var/backups/backup-www http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/backup-www && chmod +x /var/backups/backup-www
  fi
  whiptail --yesno "Update /var/backups/get-backup-www?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /var/backups/get-backup-www http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/get-backup-www && chmod +x /var/backups/get-backup-www
  fi
  whiptail --yesno "Update /var/backups/zerofill?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /var/backups/zerofill http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/zerofill && chmod +x /var/backups/zerofill
  fi
  whiptail --yesno "Update /sbin/lnmv?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /sbin/lnmv http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/lnmv && chmod +x /sbin/lnmv
  fi
  whiptail --yesno "Update /var/backups/backup-rootfs?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /var/backups/backup-rootfs http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/backup-rootfs && chmod +x /var/backups/backup-rootfs
  fi
  whiptail --yesno "Update /var/backups/freeze-rootfs?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /var/backups/freeze-rootfs http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/freeze-rootfs && chmod +x /var/backups/freeze-rootfs
  fi
  whiptail --yesno "Update /var/backups/unfreeze-rootfs?" 8 40 2 \
    --yes-button No --no-button "Update"
  RET=$?
  if [ $RET -eq 1 ]; then
	wget -O /var/backups/unfreeze-rootfs http://raw.github.com/sentfanwyaerda/raspi-config/master/toolset/unfreeze-rootfs && chmod +x /var/backups/unfreeze-rootfs
  fi
}




do_additional_menu() {
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Additional Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "0 Add user" "" \
    "1 Install Aptitude" "aptitude is an interface to apt-get" \
    "2 Set the Clock" "you can set ntpd to synchronize with the internet" \
    "3 RaspberryPi Firmware Update" ".." \
    "4 Upgrade all installed programs" ".." \
	"5 Refresh Network Connections" "" \
	"6 Configure as webserver >" ".." \
	"7 Install GPIO Connector" ".." \
	"8 Setup Wifi" "Configure Wifi settings" \
    "x Shrink root partition (experimental)" ".." \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
	  0\ *) do_add_user ;;
	  1\ *) do_aptitude ;;
	  2\ *) do_ntp_install ;;
      3\ *) do_rpi_update ;;
      4\ *) do_system_upgrade ;;
	  5\ *) do_network_refesh ;;
      6\ *) do_server_menu ;;
	  7\ *) do_gpio_install ;;
	  8\ *) do_mikerr_wifi ;;
      x\ *) do_shrink_rootfs ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_add_user() {
    NAME=$(whiptail --inputbox "Which username do you want to add to your system?" \
      20 70 -- "$NAME" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
      adduser $NAME 
    fi
#      PASSWD=$(whiptail --inputbox "And the password you want to use?" \
#      20 70 -- "$PASSWD" 3>&1 1>&2 2>&3)
#    if [ $? -eq 0 ]; then
#      passwd $NAME $PASSWD
#    fi
    #+ sudoer $NAME
	echo "$NAME ALL=(ALL:ALL) ALL\n\r" >> /etc/sudoers
}

do_aptitude(){
	apt-get install aptitude ;
}

do_ntp_install() {
	apt-get install ntp fake-hwclock ntpdate;
	
	# @/etc/rc.local "service ntp restart"
	patch_rc_local ;
	# ntpq -p && hwclock -w ;;
	ntpdate -u ntp.ubuntu.com
}

do_network_refesh() {
	ifdown eth0 && ifup eth0
}

do_gpio_install(){
	# more info: http://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/test-and-configure
	mkdir /home/`whoami`/adafruit && git clone http://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code.git /home/`whoami`/adafruit/RPi-py
	sudo apt-get install python-dev python-smbus i2c-tools python-setuptools && sudo easy_install rpi.gpio
	#sudo apt-get install python-rpi.gpio
	echo "i2c-bcm2708\ni2c-dev" >> /etc/modules
	echo "#backlist spi-bcm2708\n#blacklist i2c-bcm2708" > /etc/modprobe.d/raspi-blacklist.conf
	i2cdetect -y 1
}

do_shrink_rootfs() {
  whiptail --yesno "Would you like to install BC?\n\
it is needed to calculate additional space\n\
because we want to leave you 16M free" 8 40 2 \
    --yes-button No --no-button "Install BC"
  RET=$?
  if [ $RET -eq 1 ]; then
    apt-get install bc;
  #else return 1
  fi
    whiptail --yesno "Do you want to fsck first?" 8 40 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    fsck /dev/mmcblk0 -f -v -y;
  #else return 1
  fi
  
  # Get the starting offset of the root partition
  PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 2 -d:)
  [ "$PART_START" ] || return 1
  
  BLOCK_SIZE=$(parted /dev/mmcblk0 -ms unit s p | grep "^/dev/mmcblk0" | cut -f 4 -d:)
  [ "$BLOCK_SIZE" ] || return 1
  
  # Get current size of the root partition before shrinking
  OLD_SIZE=$(df -H | grep "^rootfs" | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | cut -f 2 -d:)
  [ "$OLD_SIZE" ] || return 1
  
  # Get minimum size of the root partition to shrink
  PART_SIZE=$(df -B$BLOCK_SIZE | grep "^rootfs" | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | cut -f 3 -d:)
  [ "$PART_SIZE" ] || return 1
  
  #makes sure the shrink leaves 16M free
  NEXT_SIZE=$(echo "$PART_SIZE+((16*1024*1024)/$BLOCK_SIZE)" | bc)
  END=$(echo "$NEXT_SIZE+$PART_START" | bc)
  
  USED_SIZE=$(df -H | grep "^rootfs" | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | sed -r 's/\s+/:/' | cut -f 3 -d:)
    
  #untested!!
  #fdisk /dev/mmcblk0 <<EOF
  #p
  #d
  #2
  #n
  #p
  #2
  #$PART_START
  #$END
  #p
  #w
  #EOF
  #ASK_TO_REBOOT=1
  
  whiptail --msgbox "The SD-card has been shrinked from $OLD_SIZE to about $USED_SIZE.\n\
$PART_SIZE and +16M= $NEXT_SIZE, $BLOCK_SIZE/block : $PART_START - $END \n\
On next boot run raspi-config and expand rootfs" 20 60 2
}

do_rpi_update(){
  whiptail --yesno "Would you like to install Git?\n\
  rpi-update depends on Git to update itself\n\
  feel free to say NO when Git is already installed!" 8 40 2 \
    --yes-button "Install Git" --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    do_setup_git
  #else return 1
  fi
  wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update -O /usr/bin/rpi-update && chmod +x /usr/bin/rpi-update
  
  apt-get install ntpdate ca-certificates
  ntpdate -u ntp.ubuntu.com
  
  whiptail --yesno "Hexxeh's rpi-update has been installed.\n\
Would you like to run rpi-update now?" 8 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    rpi-update;
    ASK_TO_REBOOT=1
  #else return 1
  fi
  whiptail --msgbox "in the future run 'sudo rpi-update' to update the firmware manually" 8 40 2
}


do_system_upgrade() {
  apt-get update && apt-get upgrade && apt-get autoclean;
  whiptail --msgbox "Now, all programs are up to date!" 8 40 2
}

do_update() {
 whiptail --yesno "Which version of raspi-config do you want to use?\n\
the altered version is available from:\n\
https://github.com/sentfanwyaerda/raspi-config" 20 60 2 \
    --yes-button "Altered" --no-button "Original"
  RET=$?
  if [ $RET -eq 0 ]; then
    do_sentfanwyaerda_update
  elif [ $RET -eq 1 ]; then
      do_asb_update
  else
    return $RET
  fi
}
do_sentfanwyaerda_update() {
    git_installl
    RASPIGITDIR=$(whiptail --inputbox "Where do you want to install raspi-config?" \
      20 70 -- "/var/lib/raspi-config" 3>&1 1>&2 2>&3)

  if [ -z $RASPIGITDIR ]; then
	wget https://raw.github.com/sentfanwyaerda/raspi-config/master/raspi-config -O /usr/bin/raspi-config
  else
    if [ -d $RASPIGITDIR ]; then
      git pull --work-tree=$RASPIGITDIR
    else
      mkdir $RASPIGITDIR &&
      git clone https://github.com/sentfanwyaerda/raspi-config.git $RASPIGITDIR &&
      ln -s $RASPIGITDIR/raspi-config /usr/bin/raspi-config
    fi
  fi
  chmod +x /usr/bin/raspi-config
  printf "Sleeping 5 seconds before reloading raspi-config\n" &&
  sleep 5 &&
  exec raspi-config
}

# [/Upgrade sentfanwyaerda]

# [Upgrade https://github.com/mikerr/raspi-config ]

do_mikerr_wifi() {
wifidevice=wlan0
WPAFILE=/etc/wpa_supplicant/wpa_supplicant.conf

{
iwlist $wifidevice scan | grep 'ESSID' | sed -e 's/.*ESSID:"\([^"]\+\)".*/  \1/' > /tmp/ap_list.txt 
} | whiptail --gauge "Scanning Wifi, please wait" 5 50 10

echo "whiptail --title \"Choose SSID, or enter manually\" \\" > /tmp/choose_ap.sh
echo "--radiolist \"Choose SSID\" \\" >> /tmp/choose_ap.sh

LINES=`wc -l < /tmp/ap_list.txt`
LINES=$((${LINES}+1))
echo "10 60 ${LINES} \\" >> /tmp/choose_ap.sh
for LINE in `cat /tmp/ap_list.txt`
    do
    echo "$LINE '' off \\" >> /tmp/choose_ap.sh
    done
echo "Enter\ manually '' on 2>/tmp/ssid.ans" >>/tmp/choose_ap.sh
    
chmod 777 /tmp/choose_ap.sh
. /tmp/choose_ap.sh
      
if [ $? -ne 0 ]; then return 0; fi

SSID=`cat /tmp/ssid.ans`
if [ "$SSID" = "Enter manually" ]; then
      SSID=$(whiptail --inputbox "SSID Name" 20 70 3>&1 1>&2 2>&3)
    if [ -z $SSID ]; then return 0 ; fi
fi

ENCRYPTION=$(whiptail --title "Encryption" --menu "Encryption for network: $SSID " $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
          "1" "WPA/WPA2" \
          "2" "WEP (hex)" \
          "3" "WEP (ascii)" \
          "4" "None" \
        3>&1 1>&2 2>&3)

if [ $? -ne 0 ]; then return 0; fi

WPANEW=/tmp/wpanew.conf
WPATMP=/tmp/wpa.conf

case $ENCRYPTION in
    '1')
        PASSPHRASE=$(whiptail --inputbox "WPA Passphrase for $SSID" 20 70 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then return 0; fi
       CRYPTPASS=$(wpa_passphrase $SSID $PASSPHRASE | grep -v "^#" | grep -v "#psk=")
      PASSERROR="Passphrase must be 8..63 characters"
        if [ "$CRYPTPASS" != "$PASSERROR" ]; then 
        echo "$CRYPTPASS" > $WPANEW
      else
        whiptail --msgbox "ERROR: $PASSERROR" 20 70 1
        return 0;
      fi
    ;;
    '2')
        PASSPHRASE=$(whiptail --inputbox "WEP key (Hex)" 20 70 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then return 0; fi

                  echo "network={
                           ssid=\"$SSID\"
                          key_mgmt=NONE
                            wep_key0=$PASSPHRASE
                            }" > $WPANEW
    ;;
    '3')
        PASSPHRASE=$(whiptail --inputbox "WEP key (ascii)" 20 70 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then return 0; fi

       echo "network={
                   ssid=\"$SSID\"
                   key_mgmt=NONE
                   wep_key0=\"$PASSPHRASE\"
                   }" > $WPANEW
    ;;
    '4')
      echo "network={
                   ssid=\"$SSID\"
                   key_mgmt=NONE
                   }" > $WPANEW
    ;;
esac
# Remove previous matching SSID config first
perl -00 -pe "s/network=\{[^}]*ssid=\"$SSID\"*[^}]*\}//g" $WPAFILE > $WPATMP
# append /merge new config at end of config file
cat $WPATMP $WPANEW > $WPAFILE

whiptail --msgbox "Wifi settings updated for SSID: $SSID" 20 60 1

# connect right now ?
#wpa_supplicant -B -i$wifidevice -c $WPAFILE
#dhclient $wifidevice -1 

}

# [/Upgrade mikerr]


#
# Interactive use loop
#
calc_wt_size
while true; do
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Expand Filesystem >" "Ensures that all of the SD card storage is available to the OS" \
    "2 Change User Password" "Change password for the default user (pi)" \
    "3 Enable Boot to Desktop/Scratch" "Choose whether to boot into a desktop environment, Scratch, or the command-line" \
    "4 Internationalisation Options >	" "Set up language and regional settings to match your location" \
    "5 Enable Camera" "Enable this Pi to work with the Raspberry Pi Camera" \
    "6 Add to Rastrack" "Add this Pi to the online Raspberry Pi Map (Rastrack)" \
    "7 Overclock" "Configure overclocking for your Pi" \
    "8 Advanced Options >" "Configure advanced settings" \
    "9 Additional Tools >" "Firmware, System Upgrade and semi-automatic webserver setup." \
    "i About raspi-config" "Information about this configuration tool" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_fsroot_resize_menu ;;
      2\ *) do_change_pass ;;
      3\ *) do_boot_behaviour ;;
      4\ *) do_internationalisation_menu ;;
      5\ *) do_camera ;;
      6\ *) do_rastrack ;;
      7\ *) do_overclock ;;
      8\ *) do_advanced_menu ;;
      9\ *) do_additional_menu ;;
      i\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
